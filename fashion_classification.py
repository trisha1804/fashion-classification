# -*- coding: utf-8 -*-
"""fashion classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19ys77a5Rvl08VvCmfdrwJAY7FLJDP_pM
"""

import keras
import tensorflow
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# (x_train,y_train),(x_test,y_test)=keras.dataset.fashion_mnist.load_data()
import tensorflow.keras as tk
mnist = tk.datasets.fashion_mnist
(x_train, y_train), (x_test, y_test) = mnist.load_data()

x_train.shape, y_train.shape

x_test.shape, y_test.shape

x_train[0]

y_train[0]

class_labels=["T-shirt/top","Trouser","Pullover","Dress","Coat","Sandal","Shrt","Sneaker","Bag","Ankleboot"]

plt.imshow(x_train[0],cmap="Greys")

plt.figure(figsize=(16,16))
for i in range(25):
  plt.subplot(5,5,i+1)
  plt.imshow(x_train[i],cmap="Greys")
  plt.axis('off')
  plt.title(f"{class_labels[y_train[i]]}={str(y_train[i])}", fontsize=20)



x_train=x_train/255
x_test=x_test/255

x_train[0]

model=tk.models.Sequential([
                      tk.layers.Flatten(input_shape=[28,28]),
                      tk.layers.Dense(units=32, activation='relu'),
                      tk.layers.Dense(units=10, activation='softmax')
])

model.summary()

model.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])

model.fit(x_train,y_train,epochs=1)

model.fit(x_train,y_train,epochs=10)

model.evaluate(x_test,y_test)

y_pred = model.predict(x_test)

y_pred[0]

np.argmax(y_pred[0].round(2))

y_test[0]

plt.figure(figsize=(16,16))
for i in range(25):
  plt.subplot(5,5,i+1)
  plt.imshow(x_test[i],cmap="Greys")
  plt.axis('off')
  plt.title("Actual={}\n Predicted={}".format(class_labels[y_test[i]],class_labels[np.argmax(y_pred[i].round(2))]))

from sklearn.metrics import confusion_matrix
cm=confusion_matrix(y_test,[np.argmax(i) for i in y_pred])

plt.figure(figsize=(16,9))
sns.heatmap(cm, annot=True, fmt="d")

from sklearn.metrics import classification_report
cr=classification_report(y_test,[np.argmax(i) for i in y_pred], target_names=class_labels,)

print(cr)

model.save("fashion classification.h5")

model_load=tk.models.load_model("fashion classification.h5")

model.predict(x_test)